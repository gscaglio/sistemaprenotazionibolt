-- Create error_logs table
CREATE TABLE error_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  level VARCHAR(20) NOT NULL CHECK (level IN ('debug', 'info', 'warning', 'error', 'critical')),
  message TEXT NOT NULL,
  error_stack TEXT,
  context JSONB,
  browser_info JSONB,
  user_id UUID REFERENCES auth.users(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc', now()),
  resolved_at TIMESTAMP WITH TIME ZONE,
  resolution_notes TEXT
);

-- Add indexes for common queries
CREATE INDEX error_logs_level_idx ON error_logs(level);
CREATE INDEX error_logs_created_at_idx ON error_logs(created_at);
CREATE INDEX error_logs_user_id_idx ON error_logs(user_id);

-- Enable RLS
ALTER TABLE error_logs ENABLE ROW LEVEL SECURITY;

-- Policies
CREATE POLICY "Allow authenticated users to view error logs"
ON error_logs FOR SELECT TO authenticated USING (true);

CREATE POLICY "Allow authenticated users to insert error logs"
ON error_logs FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Allow authenticated users to update error logs"
ON error_logs FOR UPDATE TO authenticated USING (true) WITH CHECK (true);

-- Function to clean old logs
CREATE OR REPLACE FUNCTION clean_old_error_logs()
RETURNS void
LANGUAGE plpgsql
AS $$
BEGIN
  DELETE FROM error_logs
  WHERE created_at < NOW() - INTERVAL '90 days'
  AND level NOT IN ('error', 'critical');
  
  DELETE FROM error_logs
  WHERE created_at < NOW() - INTERVAL '365 days';
END;
$$;