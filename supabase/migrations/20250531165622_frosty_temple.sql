-- Drop existing policies safely without using pg_policies
DO $$ 
BEGIN
  -- Drop policies one by one to avoid dependency on pg_policies view
  DROP POLICY IF EXISTS "Allow authenticated users to view error logs" ON error_logs;
  DROP POLICY IF EXISTS "Allow authenticated users to insert error logs" ON error_logs;
  DROP POLICY IF EXISTS "Allow authenticated users to update error logs" ON error_logs;
END $$;

-- Ensure error_logs table exists with correct structure
CREATE TABLE IF NOT EXISTS error_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    level VARCHAR(20) NOT NULL CHECK (level IN ('debug', 'info', 'warning', 'error', 'critical')),
    message TEXT NOT NULL,
    error_stack TEXT,
    context JSONB,
    browser_info JSONB,
    user_id UUID REFERENCES auth.users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc', now()),
    resolved_at TIMESTAMP WITH TIME ZONE,
    resolution_notes TEXT
);

-- Ensure indexes exist
CREATE INDEX IF NOT EXISTS error_logs_level_idx ON error_logs(level);
CREATE INDEX IF NOT EXISTS error_logs_created_at_idx ON error_logs(created_at);
CREATE INDEX IF NOT EXISTS error_logs_user_id_idx ON error_logs(user_id);

-- Enable RLS
ALTER TABLE error_logs ENABLE ROW LEVEL SECURITY;

-- Recreate policies
CREATE POLICY "Allow authenticated users to view error logs"
    ON error_logs FOR SELECT TO authenticated 
    USING (true);

CREATE POLICY "Allow authenticated users to insert error logs"
    ON error_logs FOR INSERT TO authenticated 
    WITH CHECK (true);

CREATE POLICY "Allow authenticated users to update error logs"
    ON error_logs FOR UPDATE TO authenticated 
    USING (true) WITH CHECK (true);